#!/usr/bin/perl

use warnings;
use strict;
use feature qw/ say /;
#use Data::Dumper;

my %cmd;
my %env;
my %tgt;			# targets before running the target
my @runlist;		# commands in a target
my $runtarget;
my $regex_char = qr/[a-zA-Z0-9_]/;

sub read_cmd
{
	my @ret;
	my $fh = shift;

	while (<$fh>) {
		/^\t+(.*)/||last;
		$_ = $1;
		s/#.*//;

		while (1) {
			chomp;
			s/\\$//||last;
			(my $tmp = <$fh>) =~ s/^\t+//;
			$_ .= $tmp;
			last if eof $fh
		}
		push @ret, $_ if length;		#pass empty string
	}

	\@ret;
}

sub substitute {
	my $run_ref = shift;
	my $env_ref = shift;

	for (@$run_ref) {
		while (/\$\((${regex_char}+)(?:\|([^)]*))?\)/g) {
			#$(foo) / $(foo|bar)
			#Substitute to $(foo) if $(foo) defined,
			#or substitute to 'bar'(not $(bar)!)
			$$env_ref{$1} ? s//$$env_ref{$1}/ : s//$2/;
		}
	}
}

$runtarget = shift @ARGV if @ARGV;

for (my $i=1; @ARGV; $i++) {
	$env{$i} = shift @ARGV;
}

open my $fh, "<Bakefile" or die "open failed\n";
while (<$fh>) {
	chomp;
	s/#.*//;

	if (/^($regex_char+):\s*(.*)/) {
		$cmd{$1} = read_cmd($fh);
		$tgt{$1} = [split ' ', $2] if defined $2;
		$runtarget //= $1;
	} elsif (/($regex_char+)\s*=\s*(.*)/) {
		$env{$1} = $2;
	}
}
close $fh or die "close failed\n";

if (defined (my $tmp = $tgt{$runtarget})) {
	$cmd{$_} ? push @runlist, @{$cmd{$_}}
		: die "wrong right side target\n" for @{$tmp}
}

$runtarget or die "no target to run\n";
(@runlist = (@runlist, @{$cmd{$runtarget}})) or die "no command to run\n";
substitute(\@runlist, \%env);

#say join ';', @runlist;
system join ';', @runlist;
